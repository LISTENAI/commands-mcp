on:
  push:
  pull_request:
  release:
    types: [published]

permissions:
  contents: write
  id-token: write
  pages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: darwin-arm64
            platform: macos-latest
            target: aarch64-apple-darwin
          - name: darwin-x64
            platform: macos-latest
            target: x86_64-apple-darwin
          - name: linux-x64
            platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win32-x64
            platform: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust toolchain for ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: (Ubuntu) Install native dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            libudev-dev

      - name: Set up temperary SSH key to fetch cskburn-rs
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_CSKBURN }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true

      - name: Archive distributable
        uses: actions/upload-artifact@v4
        with:
          name: commands-mcp_${{ matrix.name }}
          path: target/${{ matrix.target }}/release/commands-mcp${{ matrix.suffix }}

      - name: Archive schema.json
        uses: actions/upload-artifact@v4
        if: matrix.name == 'linux-x64'
        with:
          name: schema
          path: commands.schema.json

  pack-npm:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: commands-mcp_*

      - name: Pack
        id: pack
        run: |
          for dir in commands-mcp_*; do
            platform=${dir#commands-mcp_}
            mkdir -p binaries/${platform}
            mv -v ${dir}/commands-mcp* binaries/${platform}/
            chmod +x binaries/${platform}/commands-mcp*
          done
          echo "tarball=$(npm pack)" >> "$GITHUB_OUTPUT"

      - name: Archive tarball
        uses: actions/upload-artifact@v4
        with:
          name: npm-tarball
          path: ${{ steps.pack.outputs.tarball }}

  schema-pack:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/v'))
    steps:
      - name: Checkout schema branch
        uses: actions/checkout@v4
        with:
          ref: schema
          path: schema
          fetch-depth: 0

      - name: Download schema.json
        uses: actions/download-artifact@v4
        with:
          name: schema

      - name: Commit and push
        run: |
          mv -v commands.schema.json schema/${{ github.ref_name }}.json
          cd schema
          git config --local user.name "xychen"
          git config --local user.email "xychen@listenai.com"
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "No changes to commit"
          else
            git add ${{ github.ref_name }}.json
            git commit -m "Update schema for ${{ github.ref_name }}"
            git push
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ github.workspace }}

  schema-deploy:
    runs-on: ubuntu-latest
    needs: schema-pack

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        id: deploy

  publish-github:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: commands-mcp_*

      - name: Pack
        run: |
          mkdir -p assets
          for dir in commands-mcp_*; do
            pushd ${dir}
            if [[ "${dir}" == *"win32"* ]]; then
              zip -9 ../assets/${dir}.zip commands-mcp.exe
            else
              chmod +x commands-mcp
              tar -caf ../assets/${dir}.tar.xz commands-mcp
            fi
            popd
          done

      - name: Upload release assets
        uses: svenstaro/upload-release-action@2.11.2
        with:
          file: assets/*
          file_glob: true
          make_latest: false
